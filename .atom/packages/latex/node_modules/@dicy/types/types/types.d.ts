export declare type Uri = string;
export declare type Command = 'build' | 'clean' | 'graph' | 'load' | 'log' | 'save' | 'scrub' | 'test';
export interface LineRange {
    start: number;
    end: number;
}
export interface Reference {
    file: string;
    range?: LineRange;
}
export declare type Severity = 'trace' | 'info' | 'warning' | 'error';
export interface Message {
    severity: Severity;
    text: string;
    name?: string;
    category?: string;
    source?: Reference;
    log?: Reference;
}
export declare type OptionType = 'string' | 'strings' | 'number' | 'boolean' | 'variable';
export interface OptionDefinition {
    name: string;
    type: OptionType;
    title?: string;
    defaultValue?: any;
    description: string;
    values?: any[];
    aliases?: string[];
    noInvalidate?: boolean;
}
export declare type BibtexEngine = 'bibtex' | 'bibtex8' | 'bibtexu' | 'pbibtex' | 'upbibtex';
export declare type DviToPdfEngine = 'dvipdfm' | 'xdvipdfmx' | 'dvipdfmx';
export declare type Engine = 'latex' | 'lualatex' | 'pdflatex' | 'platex' | 'uplatex' | 'xelatex';
export declare type EpstopdfBoundingBox = 'default' | 'exact' | 'hires';
export declare type IndexEngine = 'makeindex' | 'mendex' | 'texindy' | 'upmendex';
export declare type IndexOrdering = 'word' | 'letter';
export declare type IndexSorting = 'default' | 'german' | 'thai' | 'locale';
export declare type Kanji = 'euc' | 'jis' | 'sjis' | 'uptex' | 'utf8';
export declare type KanjiInternal = 'euc' | 'sjis' | 'uptex' | 'utf8';
export declare type Lhs2texStyle = 'poly' | 'math' | 'newCode' | 'code' | 'typewriter' | 'verbatim';
export declare type LiterateAgdaEngine = 'agda' | 'lhs2TeX' | 'none';
export declare type LiterateHaskellEngine = 'lhs2TeX' | 'none';
export declare type OutputFormat = 'dvi' | 'pdf' | 'ps' | 'svg';
export declare type PweaveOutputFormat = 'tex' | 'texminted' | 'texpweave' | 'texpygments';
export declare type ShellEscape = 'disabled' | 'restricted' | 'enabled';
export interface OptionsInterface {
    [name: string]: any;
    $BIBINPUTS: string | string[];
    $BLTXMLINPUTS?: string | string[];
    $BSTINPUTS?: string | string[];
    $CLUAINPUTS?: string | string[];
    $LUAINPUTS?: string | string[];
    $MFINPUTS?: string | string[];
    $MPINPUTS?: string | string[];
    $PATH?: string | string[];
    $TEXINPUTS: string | string[];
    $TEXPICTS?: string | string[];
    bibtexEngine: BibtexEngine;
    cleanPatterns: string[];
    copyTargetsToRoot: boolean;
    dviToPdfEngine: DviToPdfEngine;
    engine: Engine;
    epstopdfBoundingBox: EpstopdfBoundingBox;
    epstopdfOutputPath: string;
    epstopdfRestricted: boolean;
    filePath: string;
    indexAutomaticRanges: boolean;
    indexCompressBlanks: boolean;
    indexDictionary?: string;
    indexEngine: IndexEngine;
    indexForceKanji: boolean;
    indexLogPath?: string;
    indexOrdering: IndexOrdering;
    indexOutputPath?: string;
    indexSorting: IndexSorting;
    indexStartPage?: string;
    indexStyle?: string;
    intermediatePostScript: boolean;
    jobName: string | null;
    jobNames: (string | null)[];
    kanji?: Kanji;
    kanjiInternal?: KanjiInternal;
    knitrConcordance: boolean;
    knitrOutputPath: string;
    lhs2texStyle: Lhs2texStyle;
    literateAgdaEngine: LiterateAgdaEngine;
    literateHaskellEngine: LiterateHaskellEngine;
    loadCache: boolean;
    loadUserOptions: boolean;
    logCategory?: string;
    outputDirectory?: string;
    outputFormat: OutputFormat;
    phaseCycles: number;
    pweaveCacheDirectory: string;
    pweaveDocumentationMode: boolean;
    pweaveFigureDirectory: string;
    pweaveKernel: string;
    pweaveOutputFormat: PweaveOutputFormat;
    pweaveOutputPath: string;
    saveCache: boolean;
    severity: Severity;
    shellEscape?: ShellEscape;
    synctex: boolean;
    tests?: string[];
    validateCache: boolean;
}
export interface JobOptions {
    [name: string]: any;
    $BIBINPUTS?: string | string[];
    $BLTXMLINPUTS?: string | string[];
    $BSTINPUTS?: string | string[];
    $CLUAINPUTS?: string | string[];
    $LUAINPUTS?: string | string[];
    $MFINPUTS?: string | string[];
    $MPINPUTS?: string | string[];
    $PATH?: string | string[];
    $TEXINPUTS?: string | string[];
    $TEXPICTS?: string | string[];
    bibtexEngine?: BibtexEngine;
    cleanPatterns?: string[];
    copyTargetsToRoot?: boolean;
    dviToPdfEngine?: DviToPdfEngine;
    engine?: Engine;
    epstopdfBoundingBox?: EpstopdfBoundingBox;
    epstopdfOutputPath?: string;
    epstopdfRestricted?: boolean;
    filePath?: string;
    indexAutomaticRanges?: boolean;
    indexCompressBlanks?: boolean;
    indexDictionary?: string;
    indexEngine?: IndexEngine;
    indexForceKanji?: boolean;
    indexLogPath?: string;
    indexOrdering?: IndexOrdering;
    indexOutputPath?: string;
    indexSorting?: IndexSorting;
    indexStartPage?: string;
    indexStyle?: string;
    intermediatePostScript?: boolean;
    kanji?: Kanji;
    kanjiInternal?: KanjiInternal;
    knitrConcordance?: boolean;
    knitrOutputPath?: string;
    lhs2texStyle?: Lhs2texStyle;
    literateAgdaEngine?: LiterateAgdaEngine;
    literateHaskellEngine?: LiterateHaskellEngine;
    loadCache?: boolean;
    loadUserOptions?: boolean;
    logCategory?: string;
    outputDirectory?: string;
    outputFormat?: OutputFormat;
    phaseCycles?: number;
    pweaveCacheDirectory?: string;
    pweaveDocumentationMode?: boolean;
    pweaveFigureDirectory?: string;
    pweaveKernel?: string;
    pweaveOutputFormat?: PweaveOutputFormat;
    pweaveOutputPath?: string;
    saveCache?: boolean;
    severity?: Severity;
    shellEscape?: ShellEscape;
    synctex?: boolean;
    tests?: string[];
    validateCache?: boolean;
}
export interface OptionsSource extends JobOptions {
    jobName?: string;
    jobNames?: string[];
    jobs?: {
        [jobName: string]: JobOptions;
    };
}
export declare const DEFAULT_OPTIONS: {
    $BIBINPUTS: string[];
    $TEXINPUTS: string[];
    bibtexEngine: string;
    cleanPatterns: string[];
    dviToPdfEngine: string;
    engine: string;
    epstopdfBoundingBox: string;
    epstopdfOutputPath: string;
    indexAutomaticRanges: boolean;
    indexEngine: string;
    indexOrdering: string;
    indexSorting: string;
    knitrConcordance: boolean;
    knitrOutputPath: string;
    lhs2texStyle: string;
    literateAgdaEngine: string;
    literateHaskellEngine: string;
    loadCache: boolean;
    loadUserOptions: boolean;
    outputFormat: string;
    phaseCycles: number;
    pweaveCacheDirectory: string;
    pweaveFigureDirectory: string;
    pweaveKernel: string;
    pweaveOutputFormat: string;
    pweaveOutputPath: string;
    saveCache: boolean;
    severity: string;
    validateCache: boolean;
};
