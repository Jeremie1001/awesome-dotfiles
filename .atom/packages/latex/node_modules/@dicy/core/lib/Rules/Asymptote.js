"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Rule_1 = require("../Rule");
class Asymptote extends Rule_1.default {
    getFileActions(file) {
        return __awaiter(this, void 0, void 0, function* () {
            // ParsedAsymptoteLog triggers updateDependencies, all others trigger run.
            return [file.type === 'ParsedAsymptoteStdOut' ? 'updateDependencies' : 'run'];
        });
    }
    constructCommand() {
        // We are executing in the same directory as the source file so we only need
        // the base name. Also, execute with high verbosity so we can capture a log
        // file from the output.
        /* eslint no-template-curly-in-string: 0 */
        return {
            args: ['asy', '-vv', '{{$BASE_0}}'],
            cd: '$ROOTDIR_0',
            severity: 'error',
            inputs: [{ file: '$DIR_0/$NAME_0.log-ParsedAsymptoteStdOut' }],
            outputs: [
                { file: '$DIR_0/${NAME_0}_0.pdf' },
                { file: '$DIR_0/${NAME_0}_0.eps' },
                { file: '$DIR_0/$NAME_0.pre' }
            ],
            stdout: '$DIR_0/$NAME_0.log-AsymptoteStdOut',
            stderr: '$DIR_0/$NAME_0.log-AsymptoteStdErr'
        };
    }
}
Asymptote.parameterTypes = [new Set(['Asymptote'])];
Asymptote.description = 'Run Asymptote on any generated .asy files.';
exports.default = Asymptote;
