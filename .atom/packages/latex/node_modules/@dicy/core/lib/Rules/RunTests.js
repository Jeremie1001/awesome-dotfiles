"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Rule_1 = require("../Rule");
class RunTests extends Rule_1.default {
    static isApplicable(consumer, command, phase, parameters = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return !!consumer.options.tests && consumer.options.tests.length > 0;
        });
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            const options = this.constructProcessOptions(this.rootPath, false, false, false);
            const commands = this.options.tests || [];
            let result = true;
            for (const command of commands) {
                this.info(`Executing \`${command}\``, 'command');
                try {
                    yield this.executeChildProcess(command, options);
                    this.info(`Test of \`${command}\` succeeded.`, 'test');
                }
                catch (error) {
                    this.error(`Test of \`${command}\` failed.`, 'test');
                    result = false;
                }
            }
            return result;
        });
    }
}
RunTests.commands = new Set(['test']);
RunTests.alwaysEvaluate = true;
RunTests.ignoreJobName = true;
RunTests.description = 'Run tests listed in `tests` options.';
exports.default = RunTests;
