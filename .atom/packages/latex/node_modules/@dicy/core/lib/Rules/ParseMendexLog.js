"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const Rule_1 = require("../Rule");
class ParsedMendexLog extends Rule_1.default {
    /**
     * Parse the mendex log.
     * @return {Promise<boolean>}  Status of rule evaluation
     */
    parse() {
        return __awaiter(this, void 0, void 0, function* () {
            // Get the output file
            const output = yield this.getResolvedOutput('$FILEPATH_0-ParsedMendexLog');
            if (!output)
                return false;
            const parsedLog = {
                messages: [],
                inputs: [],
                outputs: [],
                calls: []
            };
            const name = this.firstParameter.subType || 'mendex';
            let filePath;
            yield this.firstParameter.parse([{
                    // Error/Warning messages
                    names: ['severity', 'text', 'file', 'line'],
                    patterns: [/^(Error|Warning): (.*?)(?: in (.*?), line ([0-9]+))?\.$/i],
                    evaluate: (mode, reference, match) => {
                        const message = {
                            name,
                            severity: match.groups.severity.toLowerCase(),
                            text: match.groups.text,
                            source: { file: filePath },
                            log: reference
                        };
                        // There is a line reference so add it to the message.
                        if (match.groups.line) {
                            const line = parseInt(match.groups.line, 10);
                            message.source = {
                                file: path.normalize(match.groups.file),
                                range: { start: line, end: line }
                            };
                        }
                        parsedLog.messages.push(message);
                    }
                }, {
                    // Bad encap messages
                    names: ['text', 'file', 'line'],
                    patterns: [/^Bad encap string in (.*?), line ([0-9]+)\.$/i],
                    evaluate: (mode, reference, match) => {
                        const line = parseInt(match.groups.line, 10);
                        parsedLog.messages.push({
                            name,
                            severity: 'error',
                            text: match.groups.text,
                            source: {
                                file: path.normalize(match.groups.file),
                                range: { start: line, end: line }
                            },
                            log: reference
                        });
                    }
                }, {
                    // Coallator failure
                    names: ['text'],
                    patterns: [/^(\[ICU\] Collator creation failed.*)$/i],
                    evaluate: (mode, reference, match) => {
                        parsedLog.messages.push({
                            name,
                            severity: 'error',
                            text: match.groups.text,
                            source: { file: filePath },
                            log: reference
                        });
                    }
                }, {
                    // Entry report
                    names: ['text'],
                    patterns: [/^(.*? entries accepted, .*? rejected\.)$/i],
                    evaluate: (mode, reference, match) => {
                        parsedLog.messages.push({
                            name,
                            severity: 'info',
                            text: match.groups.text,
                            source: { file: filePath },
                            log: reference
                        });
                    }
                }, {
                    // Input files
                    names: ['file'],
                    patterns: [/^Scanning (?:dictionary|environment dictionary|input) file (.*?)\.$/i],
                    evaluate: (mode, reference, match) => {
                        parsedLog.inputs.push(path.normalize(match.groups.file));
                        parsedLog.messages.push({
                            name,
                            severity: 'info',
                            text: match._,
                            source: { file: filePath },
                            log: reference
                        });
                    }
                }, {
                    // Output files
                    names: ['file'],
                    patterns: [/^Output written in (.*?)\.$/i],
                    evaluate: (mode, reference, match) => {
                        parsedLog.outputs.push(path.normalize(match.groups.file));
                        parsedLog.messages.push({
                            name,
                            severity: 'info',
                            text: match._,
                            source: { file: filePath },
                            log: reference
                        });
                    }
                }]);
            output.value = parsedLog;
            return true;
        });
    }
}
ParsedMendexLog.parameterTypes = [new Set(['MendexLog'])];
ParsedMendexLog.commands = new Set(['build', 'log']);
ParsedMendexLog.description = 'Parses the logs produced by all mendex variants.';
ParsedMendexLog.defaultActions = ['parse'];
exports.default = ParsedMendexLog;
