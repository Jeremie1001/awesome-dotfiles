"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Rule_1 = require("../Rule");
class LhsToTeX extends Rule_1.default {
    static isApplicable(consumer, command, phase, parameters = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return parameters.some(file => ((file.type === 'LiterateHaskell' && consumer.options.literateHaskellEngine === 'lhs2TeX') ||
                (file.type === 'LiterateAgda' && consumer.options.literateAgdaEngine === 'lhs2TeX')));
        });
    }
    constructCommand() {
        const args = ['lhs2TeX'];
        // If the source is a literate Agda file then add the `--agda` option
        if (this.firstParameter.type === 'LiterateAgda') {
            args.push('--agda');
        }
        // Add the style option. `poly` is default so omit it.
        switch (this.options.lhs2texStyle) {
            case 'math':
                args.push('--math');
                break;
            case 'newCode':
                args.push('--newcode');
                break;
            case 'code':
                args.push('--code');
                break;
            case 'typewriter':
                args.push('--tt');
                break;
            case 'verbatim':
                args.push('--verb');
                break;
        }
        // Add the output file and source files.
        args.push('-o', '{{$DIR_0/$NAME_0.tex}}', '{{$FILEPATH_0}}');
        return {
            args,
            cd: '$ROOTDIR',
            severity: 'error',
            outputs: [{ file: '$DIR_0/$NAME_0.tex' }]
        };
    }
}
LhsToTeX.parameterTypes = [new Set([
        'LiterateHaskell',
        'LiterateAgda'
    ])];
LhsToTeX.description = 'Runs lhs2TeX on lhs or lagda files.';
exports.default = LhsToTeX;
