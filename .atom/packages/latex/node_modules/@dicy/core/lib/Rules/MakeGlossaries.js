"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const Rule_1 = require("../Rule");
class MakeGlossaries extends Rule_1.default {
    initialize() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getResolvedInputs(['$DIR_0/$NAME_0.acn', '$DIR_0/$NAME_0.ist']);
        });
    }
    constructCommand() {
        const { dir, name } = path.parse(this.firstParameter.filePath);
        const args = ['makeglossaries'];
        // Only push the -d option if needed.
        if (dir)
            args.push('-d', dir);
        args.push(name);
        return {
            args,
            cd: '$ROOTDIR',
            severity: 'error',
            outputs: [
                { file: '$DIR_0/$NAME_0.acr' },
                { file: '$DIR_0/$NAME_0.alg' },
                { file: '$DIR_0/$NAME_0.gls' },
                { file: '$DIR_0/$NAME_0.glg' }
            ]
        };
    }
}
MakeGlossaries.parameterTypes = [new Set(['GlossaryControlFile'])];
MakeGlossaries.description = 'Runs makeglossaries on any glossary files generated.';
exports.default = MakeGlossaries;
