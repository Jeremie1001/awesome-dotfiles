"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const Log_1 = require("../Log");
const Rule_1 = require("../Rule");
class Biber extends Rule_1.default {
    initialize() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getResolvedInputs([
                '$OUTDIR/$JOB.log-ParsedLaTeXLog',
                '$DIR_0/$NAME_0.blg-ParsedBiberLog'
            ]);
        });
    }
    getFileActions(file) {
        return __awaiter(this, void 0, void 0, function* () {
            switch (file.type) {
                case 'ParsedLaTeXLog':
                    const { name } = path.parse(this.firstParameter.filePath);
                    if (file.value && Log_1.default.hasRunMessage(file.value, 'Biber', name)) {
                        return ['run'];
                    }
                    break;
                case 'ParsedBiberLog':
                    return ['updateDependencies'];
                default:
                    return ['run'];
            }
            return [];
        });
    }
    constructCommand() {
        return {
            args: ['biber', '{{$FILEPATH_0}}'],
            cd: '$ROOTDIR',
            severity: 'error',
            outputs: [{ file: '$DIR_0/$NAME_0.bbl' }, { file: '$DIR_0/$NAME_0.blg' }]
        };
    }
}
Biber.parameterTypes = [new Set(['BiberControlFile'])];
Biber.description = 'Runs Biber to process bibliography files (bib) when need is detected.';
exports.default = Biber;
