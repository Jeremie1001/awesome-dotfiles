"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Rule_1 = require("../Rule");
const WRAPPED_LINE_PATTERN = /%$/;
class ParseKnitrConcordance extends Rule_1.default {
    parse() {
        return __awaiter(this, void 0, void 0, function* () {
            const outputFile = yield this.getResolvedOutput('$FILEPATH_0-ParsedSourceMap');
            if (!outputFile)
                return false;
            const sourceMaps = {
                maps: []
            };
            yield this.firstParameter.parse([{
                    names: ['output', 'input', 'indicies'],
                    patterns: [/^\\Sconcordance\{concordance:([^:]*):([^:]*):([^}]*)\}$/],
                    evaluate: (mode, reference, match) => {
                        // Split up the indicies in preparation to decode the RLE array.
                        const encodedIndicies = match.groups.indicies.split(/\s+/).map(x => parseInt(x, 10));
                        const mappings = [];
                        let inputLine = 1;
                        let outputLine = 1;
                        // Decode the RLE into input/output ranges
                        for (let i = 1; i < encodedIndicies.length; i += 2) {
                            for (let j = 0; j < encodedIndicies[i]; j++, outputLine++, inputLine += encodedIndicies[i + 1]) {
                                const start = inputLine;
                                const end = inputLine + encodedIndicies[i + 1] - 1;
                                if (start <= end) {
                                    mappings.push({
                                        input: { start, end },
                                        output: { start: outputLine, end: outputLine }
                                    });
                                }
                            }
                        }
                        sourceMaps.maps.push({
                            input: match.groups.input,
                            output: match.groups.output,
                            mappings
                        });
                    }
                }], line => WRAPPED_LINE_PATTERN.test(line));
            outputFile.value = sourceMaps;
            return true;
        });
    }
}
ParseKnitrConcordance.parameterTypes = [new Set(['KnitrConcordance'])];
ParseKnitrConcordance.commands = new Set(['build', 'log']);
ParseKnitrConcordance.defaultActions = ['parse'];
ParseKnitrConcordance.description = 'Parses any knitr concordance files.';
exports.default = ParseKnitrConcordance;
