"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Rule_1 = require("../Rule");
class AssignJobNames extends Rule_1.default {
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            // Get the source file associated with this job and also make sure there
            // is a Nil file.
            const files = yield this.getFiles([this.options.filePath, 'x.y-Nil']);
            if (this.options.jobName) {
                // If we have a job name then add it.
                for (const file of files) {
                    file.jobNames.add(this.options.jobName);
                }
            }
            return true;
        });
    }
}
AssignJobNames.phases = new Set(['finalize']);
AssignJobNames.commands = new Set(['load']);
AssignJobNames.alwaysEvaluate = true;
AssignJobNames.description = 'Assign job names to initial source file.';
exports.default = AssignJobNames;
