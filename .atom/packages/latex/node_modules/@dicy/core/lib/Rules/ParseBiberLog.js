"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Rule_1 = require("../Rule");
class ParseBiberLog extends Rule_1.default {
    parse() {
        return __awaiter(this, void 0, void 0, function* () {
            const output = yield this.getResolvedOutput('$FILEPATH_0-ParsedBiberLog');
            if (!output)
                return false;
            const parsedLog = {
                messages: [],
                inputs: [],
                outputs: [],
                calls: []
            };
            yield this.firstParameter.parse([{
                    // Input messages
                    names: ['text', 'input'],
                    patterns: [/^[^>]+> INFO - ((?:Found BibTeX data source|Reading) '([^']+)')$/],
                    evaluate: (mode, reference, match) => {
                        parsedLog.inputs.push(match.groups.input);
                        const message = {
                            severity: 'info',
                            name: 'Biber',
                            text: match.groups.text,
                            log: reference
                        };
                        parsedLog.messages.push(message);
                    }
                }, {
                    // Output messages
                    names: ['text', 'output'],
                    patterns: [/^[^>]+> INFO - ((?:Writing|Logfile is) '([^']+)'.*)$/],
                    evaluate: (mode, reference, match) => {
                        parsedLog.outputs.push(match.groups.output);
                        const message = {
                            severity: 'info',
                            name: 'Biber',
                            text: match.groups.text,
                            log: reference
                        };
                        parsedLog.messages.push(message);
                    }
                }, {
                    // All other messages
                    names: ['severity', 'text'],
                    patterns: [/^[^>]+> (INFO|WARN|ERROR) - (.*)$/],
                    evaluate: (mode, reference, match) => {
                        let severity = 'error';
                        switch (match.groups.severity) {
                            case 'INFO':
                                severity = 'info';
                                break;
                            case 'WARN':
                                severity = 'warning';
                                break;
                        }
                        const message = {
                            severity: severity,
                            name: 'Biber',
                            text: match.groups.text,
                            log: reference
                        };
                        parsedLog.messages.push(message);
                    }
                }]);
            output.value = parsedLog;
            return true;
        });
    }
}
ParseBiberLog.parameterTypes = [new Set(['BiberLog'])];
ParseBiberLog.commands = new Set(['build', 'log']);
ParseBiberLog.defaultActions = ['parse'];
ParseBiberLog.description = 'Parses any biber produced logs.';
exports.default = ParseBiberLog;
