"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Rule_1 = require("../Rule");
const TRUE_PATTERN = /^(true|yes|enabled?)$/i;
const ITEM_SEPARATOR_PATTERN = /\s*,\s*/;
class ParseLaTeXMagic extends Rule_1.default {
    parse() {
        return __awaiter(this, void 0, void 0, function* () {
            const output = yield this.getResolvedOutput('$FILEPATH_0-ParsedLaTeXMagic');
            const magic = {};
            yield this.firstParameter.parse([{
                    names: ['jobName', 'name', 'value'],
                    patterns: [/^%\s*!T[eE]X\s+(?:([^:]+?)\s*:\s*)?(\$?\w+)\s*=\s*(.*?)\s*$/],
                    evaluate: (mode, reference, match) => {
                        const schema = this.getOptionSchema(match.groups.name);
                        let value = match.groups.value;
                        if (schema) {
                            // If we have a schema definition then use it to parse the value
                            switch (schema.type) {
                                case 'variable':
                                    if (ITEM_SEPARATOR_PATTERN.test(value)) {
                                        value = value.split(ITEM_SEPARATOR_PATTERN);
                                    }
                                    break;
                                case 'strings':
                                    value = value.split(ITEM_SEPARATOR_PATTERN);
                                    break;
                                case 'number':
                                    value = parseInt(value, 10);
                                    break;
                                case 'boolean':
                                    value = TRUE_PATTERN.test(value);
                                    break;
                            }
                        }
                        let jobMagic = magic;
                        if (match.groups.jobName) {
                            // There is a job name specified so create a jobs Object.
                            if (!('jobs' in magic))
                                magic.jobs = {};
                            if (match.groups.jobName in magic.jobs) {
                                jobMagic = magic.jobs[match.groups.jobName];
                            }
                            else {
                                magic.jobs[match.groups.jobName] = jobMagic = {};
                            }
                        }
                        // Assign the value
                        jobMagic[match.groups.name] = value;
                    }
                }]);
            if (output)
                output.value = magic;
            return true;
        });
    }
}
ParseLaTeXMagic.commands = new Set(['load']);
ParseLaTeXMagic.parameterTypes = [new Set([
        'LaTeX',
        'LiterateAgda',
        'LiterateHaskell',
        'PythonNoWeb',
        'RNoWeb'
    ])];
ParseLaTeXMagic.defaultActions = ['parse'];
ParseLaTeXMagic.description = 'Parses Magic comments in LaTeX or knitr documents.';
exports.default = ParseLaTeXMagic;
