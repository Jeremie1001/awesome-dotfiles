"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Rule_1 = require("../Rule");
class ParsedMendexStdErr extends Rule_1.default {
    /**
     * Parse the mendex log.
     * @return {Promise<boolean>}  Status of rule evaluation
     */
    parse() {
        return __awaiter(this, void 0, void 0, function* () {
            // Get the output file
            const output = yield this.getResolvedOutput('$DIR_0/$NAME_0.log-ParsedMendexStdErr');
            if (!output)
                return false;
            const parsedLog = {
                messages: [],
                inputs: [],
                outputs: [],
                calls: []
            };
            let name = 'mendex';
            yield this.firstParameter.parse([{
                    // Get the name
                    names: ['text'],
                    patterns: [/^This is (upmendex|mendex) /i],
                    evaluate: (mode, reference, match) => {
                        name = match.groups.name;
                    }
                }, {
                    // Dictionary Error
                    names: ['name', 'text'],
                    patterns: [/^(upmendex|mendex): (.*? is forbidden to open for reading\.)$/i],
                    evaluate: (mode, reference, match) => {
                        parsedLog.messages.push({
                            name: match.groups.name,
                            severity: 'error',
                            text: match.groups.text
                        });
                    }
                }, {
                    // Missing file errors
                    names: ['text'],
                    patterns: [/^(No log file, .*?\.|.*? does not exist\.)$/i],
                    evaluate: (mode, reference, match) => {
                        parsedLog.messages.push({
                            name,
                            severity: 'error',
                            text: match.groups.text
                        });
                    }
                }, {
                    // Bad kanji encoding
                    names: ['text'],
                    patterns: [/^(Ignoring bad kanji encoding.*)$/i],
                    evaluate: (mode, reference, match) => {
                        parsedLog.messages.push({
                            name,
                            severity: 'warning',
                            text: match.groups.text
                        });
                    }
                }]);
            output.value = parsedLog;
            return true;
        });
    }
}
ParsedMendexStdErr.parameterTypes = [new Set(['MendexStdErr'])];
ParsedMendexStdErr.commands = new Set(['build', 'log']);
ParsedMendexStdErr.description = 'Parses the error produced by all mendex variants.';
ParsedMendexStdErr.defaultActions = ['parse'];
exports.default = ParsedMendexStdErr;
