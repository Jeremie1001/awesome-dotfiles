"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Rule_1 = require("../Rule");
class CheckForMissingBuildRule extends Rule_1.default {
    static isApplicable(consumer, command, phase, parameters = []) {
        return __awaiter(this, void 0, void 0, function* () {
            // Only apply if parameter is main source file for job.
            return parameters.some(file => file.filePath === consumer.options.filePath);
        });
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            const rules = Array.from(this.rules);
            // If targets found for this job then just return true.
            if (rules.some((rule) => rule.command === 'build' && rule.phase === 'execute' && rule.parameters.includes(this.firstParameter)))
                return true;
            const jobName = this.options.jobName;
            // No rules found so log an error message and cause rule failure.
            const jobText = jobName ? ` with job name of \`${jobName}\`` : '';
            this.error(`No applicable build rule was found for main source file \`${this.firstParameter.filePath}\`${jobText}.`);
            return false;
        });
    }
}
CheckForMissingBuildRule.parameterTypes = [new Set(['*'])];
CheckForMissingBuildRule.phases = new Set(['finalize']);
CheckForMissingBuildRule.alwaysEvaluate = true;
CheckForMissingBuildRule.description = 'Check for no applicable build rule.';
exports.default = CheckForMissingBuildRule;
