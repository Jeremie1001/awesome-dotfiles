"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const File_1 = require("../File");
const Rule_1 = require("../Rule");
class Migrate extends Rule_1.default {
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.moveUserOptions();
            return true;
        });
    }
    moveUserOptions() {
        return __awaiter(this, void 0, void 0, function* () {
            const oldPath = this.resolvePath('$HOME/.dicy.yaml');
            const newPath = this.resolvePath('$CONFIG_HOME/dicy/config.yaml');
            if (yield File_1.default.canRead(oldPath)) {
                if (yield File_1.default.canRead(newPath)) {
                    this.warning(`Unable to migrate user options from \`${oldPath}\` since \`${newPath}\` already exists.`);
                }
                else {
                    yield fs.move(oldPath, newPath);
                    this.info(`Moved user options file \`${oldPath}\` to \`${newPath}\`.`);
                }
            }
        });
    }
}
Migrate.commands = new Set(['load']);
Migrate.phases = new Set(['initialize']);
Migrate.alwaysEvaluate = true;
Migrate.ignoreJobName = true;
Migrate.description = 'Do migration tasks.';
exports.default = Migrate;
