"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
const Rule_1 = require("../Rule");
function inRange(range, line) {
    return range.start <= line && range.end >= line;
}
class ApplySourceMaps extends Rule_1.default {
    initialize() {
        return __awaiter(this, void 0, void 0, function* () {
            // We are going to modify the log so add it as an output
            yield this.getOutput(this.secondParameter.filePath);
        });
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.secondParameter.value || !this.firstParameter.value)
                return true;
            const sourceMaps = this.firstParameter.value;
            const parsedLog = _.cloneDeep(this.secondParameter.value);
            for (const sourceMap of sourceMaps.maps) {
                for (const message of parsedLog.messages) {
                    if (!message.source || message.source.file !== sourceMap.output)
                        continue;
                    if (message.source && message.source.range) {
                        const startMapping = sourceMap.mappings.find(mapping => !!message.source && !!message.source.range && inRange(mapping.output, message.source.range.start));
                        const endMapping = sourceMap.mappings.find(mapping => !!message.source && !!message.source.range && inRange(mapping.output, message.source.range.end));
                        if (startMapping && endMapping) {
                            message.source = {
                                file: sourceMap.input,
                                range: {
                                    start: startMapping.input.start,
                                    end: endMapping.input.end
                                }
                            };
                        }
                    }
                    else {
                        message.source = { file: sourceMap.input };
                    }
                }
            }
            this.secondParameter.value = parsedLog;
            return true;
        });
    }
}
ApplySourceMaps.parameterTypes = [
    new Set(['ParsedSourceMap']),
    new Set([
        'ParsedAsymptoteLog',
        'ParsedBiberLog',
        'ParsedBibTeXLog',
        'ParsedLaTeXLog',
        'ParsedMakeIndexLog'
    ])
];
ApplySourceMaps.commands = new Set(['build', 'log']);
ApplySourceMaps.description = 'Applies source maps to log files.';
exports.default = ApplySourceMaps;
