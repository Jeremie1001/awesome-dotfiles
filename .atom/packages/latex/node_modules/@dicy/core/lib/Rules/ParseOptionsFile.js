"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Rule_1 = require("../Rule");
class ParseOptionsFile extends Rule_1.default {
    preEvaluate() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getResolvedInputs(['$CONFIG_HOME/dicy/config.yaml', 'dicy.yaml', '$NAME.yaml']);
            if (this.inputs.length === 0)
                this.actions.delete('run');
        });
    }
    parse() {
        return __awaiter(this, void 0, void 0, function* () {
            for (const input of this.inputs) {
                const output = yield this.getOutput(`${input.filePath}-ParsedYAML`);
                if (output) {
                    output.value = yield input.readYaml();
                }
            }
            return true;
        });
    }
}
ParseOptionsFile.commands = new Set(['load']);
ParseOptionsFile.defaultActions = ['parse'];
ParseOptionsFile.description = 'Parses the YAML option file.';
exports.default = ParseOptionsFile;
