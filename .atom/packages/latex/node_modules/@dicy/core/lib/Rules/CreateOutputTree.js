"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
const path = require("path");
const File_1 = require("../File");
const Rule_1 = require("../Rule");
class CreateOutputTree extends Rule_1.default {
    static isApplicable(consumer, command, phase, parameters = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return !!consumer.options.outputDirectory && consumer.options.outputDirectory !== '.';
        });
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            const outputDirectories = _.uniq(this.options.jobNames.map(jobName => this.getJobOptions(jobName).outputDirectory || '.')
                .filter(outputDirectory => outputDirectory !== '.'));
            const directories = ['.'].concat(yield this.globPath('**/*', {
                types: 'directories',
                ignorePattern: outputDirectories.map(outputDirectory => `**/${outputDirectory}/**`)
            }));
            yield Promise.all(directories.map(directory => File_1.default.ensureDir(path.resolve(this.rootPath, this.options.outputDirectory || '.', directory))));
            return true;
        });
    }
}
CreateOutputTree.phases = new Set(['initialize']);
CreateOutputTree.alwaysEvaluate = true;
CreateOutputTree.description = 'Create directory tree for aux files when `outputDirectory` is set.';
exports.default = CreateOutputTree;
