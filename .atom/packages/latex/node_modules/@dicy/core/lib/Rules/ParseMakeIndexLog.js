"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Rule_1 = require("../Rule");
const MESSAGE_PATTERN = /^\s+--\s*(.*)$/;
class ParseMakeIndexLog extends Rule_1.default {
    parse() {
        return __awaiter(this, void 0, void 0, function* () {
            const output = yield this.getResolvedOutput('$FILEPATH_0-ParsedMakeIndexLog');
            if (!output)
                return false;
            const name = 'makeindex';
            const parsedLog = {
                messages: [],
                inputs: [],
                outputs: [],
                calls: []
            };
            yield this.firstParameter.parse([{
                    names: ['input'],
                    patterns: [
                        /^Scanning (?:style|input) file (.*?)[.]+done .*$/
                    ],
                    evaluate: (mode, reference, match) => {
                        parsedLog.inputs.push(this.normalizePath(match.groups.input));
                        parsedLog.messages.push({
                            severity: 'info',
                            name,
                            text: match._,
                            log: reference
                        });
                    }
                }, {
                    names: ['output'],
                    patterns: [
                        /^(?:Output|Transcript) written in (.*?)\.*$/
                    ],
                    evaluate: (mode, reference, match) => {
                        parsedLog.outputs.push(this.normalizePath(match.groups.output));
                        parsedLog.messages.push({
                            severity: 'info',
                            name,
                            text: match._,
                            log: reference
                        });
                    }
                }, {
                    names: ['text'],
                    patterns: [
                        /^(Nothing written in .*?\.)$/
                    ],
                    evaluate: (mode, reference, match) => {
                        parsedLog.messages.push({
                            severity: 'warning',
                            name,
                            text: match.groups.text,
                            log: reference
                        });
                    }
                }, {
                    names: ['text'],
                    patterns: [
                        /^(Sorting entries.*)$/
                    ],
                    evaluate: (mode, reference, match) => {
                        parsedLog.messages.push({
                            severity: 'info',
                            name,
                            text: match.groups.text,
                            log: reference
                        });
                    }
                }, {
                    names: ['inputPath', 'inputLine', 'outputPath', 'outputLine', 'text'],
                    patterns: [
                        /## Warning \(input = (.+), line = (\d+); output = (.+), line = (\d+)\):/,
                        MESSAGE_PATTERN
                    ],
                    evaluate: (mode, reference, match) => {
                        const line = parseInt(match.groups.inputLine, 10);
                        parsedLog.messages.push({
                            severity: 'warning',
                            name: 'makeindex',
                            text: match.groups.text,
                            log: reference,
                            source: {
                                file: match.groups.inputPath,
                                range: {
                                    start: line,
                                    end: line
                                }
                            }
                        });
                    }
                }, {
                    names: ['category', 'file', 'line', 'text'],
                    patterns: [
                        /^[*!]+ (Input (?:index|style)) error \(file = (.+), line = (\d+)\):$/,
                        MESSAGE_PATTERN
                    ],
                    evaluate: (mode, reference, match) => {
                        const line = parseInt(match.groups.line, 10);
                        parsedLog.messages.push({
                            severity: 'error',
                            name: 'makeindex',
                            text: match.groups.text,
                            category: match.groups.category,
                            log: reference,
                            source: {
                                file: match.groups.file,
                                range: {
                                    start: line,
                                    end: line
                                }
                            }
                        });
                    }
                }]);
            output.value = parsedLog;
            return true;
        });
    }
}
ParseMakeIndexLog.parameterTypes = [new Set(['MakeIndexLog'])];
ParseMakeIndexLog.commands = new Set(['build', 'log']);
ParseMakeIndexLog.defaultActions = ['parse'];
ParseMakeIndexLog.description = 'Parses any logs generated by makeindex.';
exports.default = ParseMakeIndexLog;
