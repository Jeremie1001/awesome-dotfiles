"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const Log_1 = require("../Log");
const Rule_1 = require("../Rule");
const JAPANESE_BIBTEX_PATTERN = /^u?pbibtex$/;
class BibTeX extends Rule_1.default {
    static isApplicable(consumer, command, phase, parameters = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return consumer.isGrandparentOf(parameters[0], parameters[1]) &&
                !!parameters[1].value && parameters[1].value.commands && !!parameters[1].value.commands.includes('bibdata');
        });
    }
    initialize() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getResolvedInputs([
                '$OUTDIR/$JOB.log-ParsedLaTeXLog',
                '$DIR_0/$NAME_0.blg-ParsedBibTeXLog'
            ]);
        });
    }
    getFileActions(file) {
        return __awaiter(this, void 0, void 0, function* () {
            switch (file.type) {
                case 'ParsedLaTeXLog':
                    const { name } = path.parse(this.firstParameter.filePath);
                    if (file.value && Log_1.default.hasRunMessage(file.value, 'BibTeX', name)) {
                        return ['run'];
                    }
                    break;
                case 'ParsedBibTeXLog':
                    return ['updateDependencies'];
                case 'LaTeXAuxilary':
                    return ['run'];
            }
            return [];
        });
    }
    constructCommand() {
        const engine = this.options.bibtexEngine;
        const args = [engine];
        if (JAPANESE_BIBTEX_PATTERN.test(engine)) {
            if (this.options.kanji) {
                args.push(`-kanji=${this.options.kanji}`);
            }
            if (this.options.kanjiInternal) {
                args.push(`-kanji-internal=${this.options.kanjiInternal}`);
            }
        }
        args.push('{{$BASE_0}}');
        return {
            args,
            cd: '$ROOTDIR/$DIR_0',
            severity: 'error',
            outputs: [{ file: '$DIR_0/$NAME_0.bbl' }, { file: '$DIR_0/$NAME_0.blg' }]
        };
    }
}
BibTeX.parameterTypes = [
    new Set(['LaTeXAuxilary']),
    new Set(['ParsedLaTeXAuxilary'])
];
BibTeX.description = 'Runs BibTeX to process bibliography files (bib) when need is detected.';
exports.default = BibTeX;
