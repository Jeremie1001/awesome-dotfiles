"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const Rule_1 = require("../Rule");
class CopyTargetsToRoot extends Rule_1.default {
    static isApplicable(consumer, command, phase, parameters = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return consumer.options.copyTargetsToRoot &&
                parameters.every(file => !file.virtual && consumer.isOutputTarget(file) && path.dirname(file.filePath) !== '.');
        });
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            // Copy the target to it's new location and add the result as an output.
            const filePath = this.resolvePath('$ROOTDIR/$BASE_0');
            yield this.firstParameter.copy(filePath);
            yield this.getInput(this.firstParameter.filePath, 'target');
            yield this.getOutput(filePath, 'target');
            return true;
        });
    }
}
CopyTargetsToRoot.parameterTypes = [new Set(['*'])];
CopyTargetsToRoot.description = 'Copy targets to root directory.';
CopyTargetsToRoot.alwaysEvaluate = true;
exports.default = CopyTargetsToRoot;
