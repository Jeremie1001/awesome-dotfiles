"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Rule_1 = require("../Rule");
function escapePath(filePath) {
    return filePath.replace(/\\/g, '\\\\');
}
class PatchSyncTeX extends Rule_1.default {
    constructCommand() {
        // Remove the concordance part of the file name because patchSynctex just
        // adds it back on. The first parameter is really supposed to be the Rnw
        // file, but patchSynctex has no way to know the output path of knit if
        // it is a custom value. If we pass the root name of the concordance file
        // then we can trick it into customizing the name.
        const filePath = escapePath(this.firstParameter.filePath.replace('-concordance', ''));
        // Remove the SyncTeX extensions because patchSynctex tries to guess it.
        const synctexPath = escapePath(this.secondParameter.filePath.replace(/\.synctex(\.gz)?$/i, ''));
        const lines = [
            'library(patchSynctex)',
            `patchSynctex('${filePath}',syncfile='${synctexPath}')`
        ];
        // Set the severity to warning since patching the SyncTeX file is just a
        // nicety.
        return {
            args: ['Rscript', '-e', lines.join(';')],
            cd: '$ROOTDIR',
            severity: 'warning',
            outputs: [{ file: '$DIR_1/BASE_1' }]
        };
    }
}
PatchSyncTeX.parameterTypes = [
    new Set(['KnitrConcordance']),
    new Set(['SyncTeX'])
];
PatchSyncTeX.phases = new Set(['finalize']);
PatchSyncTeX.description = 'Patches SyncTeX files if LaTeX document was generated by knitr so PDF reverse sync will work.';
exports.default = PatchSyncTeX;
