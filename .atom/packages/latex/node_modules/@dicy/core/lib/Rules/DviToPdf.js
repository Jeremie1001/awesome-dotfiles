"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Rule_1 = require("../Rule");
class DviToPdf extends Rule_1.default {
    static isApplicable(consumer, command, phase, parameters = []) {
        return __awaiter(this, void 0, void 0, function* () {
            // Only apply if output format is pdf and intermediate PostScript generation
            // is off.
            return consumer.options.outputFormat === 'pdf' && !consumer.options.intermediatePostScript;
        });
    }
    constructCommand() {
        return {
            args: [
                this.options.dviToPdfEngine,
                '-o',
                '{{$DIR_0/$NAME_0.pdf}}',
                '{{$FILEPATH_0}}'
            ],
            cd: '$ROOTDIR',
            severity: 'error',
            inputs: [{ file: '$FILEPATH_0', type: 'target' }],
            outputs: [{ file: '$DIR_0/$NAME_0.pdf', type: 'target' }]
        };
    }
}
DviToPdf.parameterTypes = [new Set(['DeviceIndependentFile'])];
DviToPdf.description = 'Converts DVI to PDF using (x)dvipdfm(x).';
exports.default = DviToPdf;
