"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Rule_1 = require("../Rule");
class Agda extends Rule_1.default {
    static isApplicable(consumer, command, phase, parameters = []) {
        return __awaiter(this, void 0, void 0, function* () {
            // Only apply if the literate Agda engine is set to agda
            return consumer.options.literateAgdaEngine === 'agda';
        });
    }
    constructCommand() {
        // Force latex mode and save all file to root directory.
        return {
            args: ['agda', '--latex', '--latex-dir=.', '{{$BASE_0}}'],
            cd: '$ROOTDIR/$DIR_0',
            severity: 'error',
            outputs: [
                { file: '$DIR_0/$NAME_0.tex' },
                { file: '$DIR_0/$NAME_0.agdai' },
                { file: '$DIR_0/agda.sty' }
            ]
        };
    }
}
Agda.parameterTypes = [new Set(['LiterateAgda'])];
Agda.description = 'Runs agda on lagda files.';
exports.default = Agda;
