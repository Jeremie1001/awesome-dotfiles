"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Rule_1 = require("../Rule");
class ReportLogMessages extends Rule_1.default {
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            const parsedLog = this.firstParameter.value;
            // Not much here, just log each message, if there are any.
            if (parsedLog && parsedLog.messages) {
                this.log(...parsedLog.messages);
            }
            return true;
        });
    }
}
ReportLogMessages.parameterTypes = [new Set([
        'ParsedAsymptoteStdOut',
        'ParsedBiberLog',
        'ParsedBibTeXLog',
        'ParsedLaTeXLog',
        'ParsedMakeIndexLog',
        'ParsedMendexLog',
        'ParsedMendexStdErr',
        'ParsedSplitIndexStdErr',
        'ParsedSplitIndexStdOut',
        'ParsedXindyLog'
    ])];
ReportLogMessages.commands = new Set(['log']);
ReportLogMessages.alwaysEvaluate = true;
ReportLogMessages.description = 'Reports log messages from any parsed log files.';
exports.default = ReportLogMessages;
