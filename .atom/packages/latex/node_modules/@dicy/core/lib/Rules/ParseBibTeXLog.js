"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Rule_1 = require("../Rule");
class ParseBibTeXLog extends Rule_1.default {
    parse() {
        return __awaiter(this, void 0, void 0, function* () {
            const output = yield this.getResolvedOutput('$FILEPATH_0-ParsedBibTeXLog');
            if (!output)
                return false;
            const parsedLog = {
                messages: [],
                inputs: [],
                outputs: [],
                calls: []
            };
            const name = (this.firstParameter.subType === '8-bit Big BibTeX')
                ? 'BibTeX8'
                : (this.firstParameter.subType || 'BibTeX');
            yield this.firstParameter.parse([{
                    // Missing database files or missing cross references.
                    names: ['text'],
                    patterns: [/^(I couldn't open (?:auxiliary|database) file .*|A bad cross reference---entry .*)$/],
                    evaluate: (mode, reference, match) => {
                        parsedLog.messages.push({
                            severity: 'error',
                            name,
                            text: match.groups.text,
                            log: reference
                        });
                    }
                }, {
                    // Warning messages
                    names: ['text'],
                    patterns: [/^Warning--(.+)$/],
                    evaluate: (mode, reference, match) => {
                        parsedLog.messages.push({
                            severity: 'warning',
                            name,
                            text: match.groups.text,
                            log: reference
                        });
                    }
                }, {
                    // Continued source references.
                    names: ['line', 'file'],
                    patterns: [/^-+line (\d+) of file (.+)$/],
                    evaluate: (mode, reference, match) => {
                        const message = parsedLog.messages[parsedLog.messages.length - 1];
                        if (message) {
                            const line = parseInt(match.groups.line, 10);
                            // Extend the log reference
                            if (message.log && message.log.range && reference.range)
                                message.log.range.end = reference.range.start;
                            // Add a source reference
                            message.source = {
                                file: this.normalizePath(match.groups.file),
                                range: {
                                    start: line,
                                    end: line
                                }
                            };
                        }
                    }
                }, {
                    // Error messages with a source reference.
                    names: ['text', 'line', 'file'],
                    patterns: [/^(.+)---line (\d+) of file (.*)$/],
                    evaluate: (mode, reference, match) => {
                        const line = parseInt(match.groups.line, 10);
                        parsedLog.messages.push({
                            severity: 'error',
                            name,
                            text: match.groups.text,
                            log: reference,
                            source: {
                                file: this.normalizePath(match.groups.file),
                                range: {
                                    start: line,
                                    end: line
                                }
                            }
                        });
                    }
                }, {
                    // Input file notifications. The non-greedy pattern at the beginning is to
                    // work around a MiKTeX bug in which there is no newline after the first
                    // line.
                    names: ['input'],
                    patterns: [/^.*?(?:Database file #\d+|The style file|The top-level auxiliary file|A level-\d+ auxiliary file): (.*)$/],
                    evaluate: (mode, reference, match) => {
                        parsedLog.inputs.push(match.groups.input);
                    }
                }]);
            try {
                const { stdout } = yield this.executeCommand({
                    args: ['kpsewhich'].concat(parsedLog.inputs),
                    cd: '$ROOTDIR',
                    severity: 'warning',
                    stdout: true
                });
                parsedLog.inputs = stdout
                    ? stdout.split('\n').filter((file) => file).map(file => this.normalizePath(file))
                    : [];
            }
            catch (error) {
                this.error(error.toString());
            }
            output.value = parsedLog;
            return true;
        });
    }
}
ParseBibTeXLog.parameterTypes = [new Set(['BibTeXLog'])];
ParseBibTeXLog.commands = new Set(['build', 'log']);
ParseBibTeXLog.defaultActions = ['parse'];
ParseBibTeXLog.description = 'Parses any bibtex produced logs.';
exports.default = ParseBibTeXLog;
