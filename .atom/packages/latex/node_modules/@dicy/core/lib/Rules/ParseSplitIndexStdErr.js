"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Rule_1 = require("../Rule");
class ParseSplitIndexStdOut extends Rule_1.default {
    parse() {
        return __awaiter(this, void 0, void 0, function* () {
            const output = yield this.getResolvedOutput('$DIR_0/$NAME_0.log-ParsedSplitIndexStdErr');
            if (!output)
                return false;
            const parsedLog = {
                messages: [],
                inputs: [],
                outputs: [],
                calls: []
            };
            yield this.firstParameter.parse([{
                    // splitindex generates error messages via Perl's die command so we just
                    // parse anything that has that form.
                    names: ['text', 'file', 'line'],
                    patterns: [/^(.*) at (.*?) line ([0-9]+)\.$/],
                    evaluate: (mode, reference, match) => {
                        const line = parseInt(match.groups.line, 10);
                        // Do not include the log reference since it is to a virtual file.
                        parsedLog.messages.push({
                            severity: 'error',
                            name: 'splitindex',
                            text: match.groups.text,
                            source: {
                                file: match.groups.file,
                                range: {
                                    start: line,
                                    end: line
                                }
                            }
                        });
                    }
                }]);
            output.value = parsedLog;
            return true;
        });
    }
}
ParseSplitIndexStdOut.parameterTypes = [new Set(['SplitIndexStdErr'])];
ParseSplitIndexStdOut.defaultActions = ['parse'];
ParseSplitIndexStdOut.description = 'Parses the error output of splitindex.';
exports.default = ParseSplitIndexStdOut;
