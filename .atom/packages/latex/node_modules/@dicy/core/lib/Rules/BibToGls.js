"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Rule_1 = require("../Rule");
class BibToGls extends Rule_1.default {
    static isApplicable(consumer, command, phase, parameters = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return consumer.isGrandparentOf(parameters[0], parameters[1]) &&
                !!parameters[1].value && !!parameters[1].value.commands &&
                !!parameters[1].value.commands.includes('glsxtr@resource');
        });
    }
    getFileActions(file) {
        return __awaiter(this, void 0, void 0, function* () {
            switch (file.type) {
                case 'ParsedBibToGlsLog':
                    return ['updateDependencies'];
                case 'LaTeXAuxilary':
                    return ['run'];
            }
            return [];
        });
    }
    constructCommand() {
        const args = ['bib2gls', '-t', '{{$NAME_0.gelg}}'];
        // Only push the -d option if needed.
        if (this.env.DIR_0 !== '.')
            args.push('-d', '{{$DIR_0}}');
        args.push('{{$NAME_0}}');
        return {
            args,
            cd: '$ROOTDIR',
            severity: 'error',
            inputs: [{ file: '$DIR_0/$NAME_0.gelg-ParsedBibToGlsLog' }],
            outputs: [{ file: '$DIR_0/$NAME_0.gelg' }]
        };
    }
}
BibToGls.parameterTypes = [
    new Set(['LaTeXAuxilary']),
    new Set(['ParsedLaTeXAuxilary'])
];
BibToGls.description = 'Runs bib2gls to process bibliography files (bib) when need is detected.';
exports.default = BibToGls;
