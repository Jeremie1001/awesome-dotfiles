"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const Rule_1 = require("../Rule");
class ParseFileListing extends Rule_1.default {
    parse() {
        return __awaiter(this, void 0, void 0, function* () {
            const output = yield this.getResolvedOutput('$FILEPATH_0-ParsedFileListing');
            if (!output)
                return false;
            let rootPath = '';
            const parsedLog = {
                messages: [],
                inputs: [],
                outputs: [],
                calls: []
            };
            yield this.firstParameter.parse([{
                    names: ['path'],
                    patterns: [/^PWD (.*)$/],
                    evaluate: (mode, reference, match) => {
                        rootPath = match.groups.path;
                    }
                }, {
                    names: ['type', 'path'],
                    patterns: [/^(INPUT|OUTPUT) (.*)$/],
                    evaluate: (mode, reference, match) => {
                        const candidate = this.normalizePath(path.resolve(rootPath, match.groups.path));
                        const items = match.groups.type === 'INPUT' ? parsedLog.inputs : parsedLog.outputs;
                        if (!items.includes(candidate))
                            items.push(candidate);
                    }
                }]);
            parsedLog.inputs.sort();
            parsedLog.outputs.sort();
            output.value = parsedLog;
            return true;
        });
    }
}
ParseFileListing.parameterTypes = [new Set(['FileListing'])];
ParseFileListing.defaultActions = ['parse'];
ParseFileListing.description = 'Parse the file listing (fls) file generated by latex. Used to update the dependencies for rule LaTeX.';
exports.default = ParseFileListing;
