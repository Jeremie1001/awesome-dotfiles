"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const Cache_1 = require("./Cache");
const concatFiles = (pkg) => (data, relPath) => `${data}${fs.readFileSync(path.join(pkg.path, relPath))}`;
function tryReadFile(fileName) {
    try {
        return fs.readFileSync(fileName).toString();
    }
    catch (err) {
        console.error(`Encountered an error while attempting to read module from path ${fileName}:\n\n${err.message}`);
    }
    return undefined;
}
function tryTranspile(ts, fileSrc, opts) {
    try {
        return ts.transpileModule(fileSrc, opts).outputText;
    }
    catch (err) {
        console.error(`Encountered an error while attempting to transpile module ${opts.moduleName} from path ${opts.fileName}:\n\n${err.message}`);
    }
    return undefined;
}
function getCacheKeyData(_, fileName, opts, pkg) {
    const cache = Cache_1.default.get(fileName);
    let data = JSON.stringify(cache.config) + cache.transpilerVersion;
    if (opts.cacheKeyFiles instanceof Array) {
        data += opts.cacheKeyFiles.reduce(concatFiles(pkg), '');
    }
    return data;
}
exports.getCacheKeyData = getCacheKeyData;
function transpile(_, fileName, opts) {
    const moduleName = path.basename(fileName).replace(/\.[^.]*$/, '');
    const verbose = (opts.verbose === true);
    if (verbose) {
        console.log(`Received call to transpile module ${moduleName} from path ${fileName}.`);
    }
    const fileSrc = tryReadFile(fileName);
    const output = {};
    if (fileSrc !== undefined) {
        const cache = Cache_1.default.get(fileName);
        if (cache.transpilerModule !== null) {
            const compilerOptions = Object.assign({}, cache.config.compilerOptions, opts.compilerOptions);
            const finalOpts = {
                fileName,
                moduleName,
                compilerOptions,
            };
            if (verbose) {
                console.log(`Transpiling module '${moduleName}' using options:\n${JSON.stringify(finalOpts, null, 2)}`);
            }
            output.code = tryTranspile(cache.transpilerModule, fileSrc, finalOpts);
        }
    }
    return output;
}
exports.transpile = transpile;
