"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const resolve_1 = require("./resolve");
const hasOwnObjectProperty = (o, property) => o.hasOwnProperty(property) && typeof o[property] === 'object' && !Array.isArray(o[property]);
function compose(...objects) {
    const newObj = Object.assign({}, ...objects);
    for (const property in objects[0]) {
        if (hasOwnObjectProperty(objects[0], property)) {
            newObj[property] = compose(...(objects.map(o => o[property])));
        }
    }
    return newObj;
}
function removeComments(source) {
    return source.replace(/\/\*[\s\S]*?\*\/|([^\\:]|^)\/\/.*$/gm, '$1');
}
function readJSON(location) {
    let file = location;
    if (!fs.existsSync(file) && !file.endsWith('.json'))
        file += '.json';
    try {
        const content = fs.readFileSync(file, 'utf8');
        const json = removeComments(content);
        return JSON.parse(json);
    }
    catch (err) {
        console.error(`Failed to parse tsconfig located at ${location}.\nIs your configuration file properly formatted JSON?. Error message was:\n${err.message}`);
        return {};
    }
}
function isChildConfig(config) {
    return typeof config.extends === 'string';
}
function getParentConfig(config, location, descendants) {
    const parent = path.resolve(path.dirname(location), config.extends);
    if (descendants.has(parent)) {
        console.warn(`The tsconfig file at ${location} attempts to extend ${parent}, but this file already inherits from it. This circular reference will be ignored.`);
        return {};
    }
    return loadConfig(parent, descendants.add(location));
}
function loadConfig(location, descendants = new Set()) {
    const config = readJSON(location);
    if (isChildConfig(config)) {
        const parent = getParentConfig(config, location, descendants);
        return Object.assign(compose(parent, config), { extends: undefined });
    }
    return config;
}
exports.default = {
    resolve: (baseDir) => {
        const location = resolve_1.default(baseDir, 'tsconfig.json');
        if (location !== undefined) {
            return loadConfig(location);
        }
        return {};
    },
};
