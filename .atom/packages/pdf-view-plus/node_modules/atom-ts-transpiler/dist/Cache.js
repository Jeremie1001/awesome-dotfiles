"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const Config_1 = require("./Config");
const resolve_1 = require("./resolve");
const Transpiler_1 = require("./Transpiler");
class Cache {
    constructor(dir) {
        this.dir = dir;
        Cache.entries.set(dir, this);
    }
    static get(filePath) {
        const dir = path.dirname(filePath);
        if (Cache.entries.has(dir)) {
            return Cache.entries.get(dir);
        }
        return new Cache(dir);
    }
    get config() {
        if (this.myConfig === undefined) {
            this.myConfig = Config_1.default.resolve(this.dir);
        }
        return this.myConfig;
    }
    get transpilerModule() {
        const transpiler = this.transpiler;
        return transpiler ? transpiler.module : null;
    }
    get transpilerVersion() {
        const transpiler = this.transpiler;
        return transpiler ? transpiler.version : null;
    }
    get transpiler() {
        if (this.myTranspiler === undefined) {
            const modulesDir = resolve_1.default(this.dir, 'node_modules');
            if (modulesDir !== undefined) {
                const typescriptDir = path.join(modulesDir, 'typescript');
                this.myTranspiler = Transpiler_1.default.get(typescriptDir);
            }
            else {
                console.error(`Could not resolve node_modules directory associated with ${this.dir}\nIs this package properly installed?`);
                this.myTranspiler = null;
            }
        }
        return this.myTranspiler;
    }
}
Cache.entries = new Map();
exports.default = Cache;
