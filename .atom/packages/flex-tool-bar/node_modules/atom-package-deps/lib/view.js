"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

class View {
  constructor(name, dependencies) {
    this.name = name;
    this.dependencies = dependencies;
    const notification = atom.notifications.addInfo(`Installing ${name} dependencies`, {
      detail: `Installing ${dependencies.map(item => item.name).join(', ')}`,
      dismissable: true
    });
    const progress = document.createElement('progress');

    this.dispose = function () {
      notification.dismiss();
    };

    this.advance = function () {
      progress.value++;
    };

    progress.max = dependencies.length;
    progress.style.width = '100%';

    try {
      const notificationView = atom.views.getView(notification);
      const notificationContent = notificationView.querySelector('.detail-content') || notificationView.querySelector('.content');

      if (notificationContent) {
        notificationContent.appendChild(progress);
      }
    } catch (_) {
      /* Notifications package is disabled */
    }
  }

  complete(errors) {
    this.dispose();

    if (!errors.size) {
      atom.notifications.addSuccess(`Installed ${this.name} dependencies`, {
        detail: `Installed ${this.dependencies.map(item => item.name).join(', ')}`
      });
      return;
    }

    const packages = [];

    for (const [packageName, error] of errors) {
      packages.push(`  â€¢ ${packageName}`);
      console.error(`[Package-Deps] Unable to install ${packageName}, Error:`, error && error.stack || error);
    }

    atom.notifications.addWarning(`Failed to install ${this.name} dependencies`, {
      detail: `These packages were not installed, check your console\nfor more info.\n${packages.join('\n')}`,
      dismissable: true
    });
  }

}

exports.default = View;