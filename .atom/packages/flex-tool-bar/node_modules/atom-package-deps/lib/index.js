"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.install = installDependencies;

var _assert = _interopRequireDefault(require("assert"));

var Helpers = _interopRequireWildcard(require("./helpers"));

var _view = _interopRequireDefault(require("./view"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

if (typeof window.__steelbrain_package_deps === 'undefined') {
  window.__steelbrain_package_deps = new Set();
}

async function installDependencies(packageName, promptUser = true) {
  (0, _assert.default)(packageName, '[Package-Deps] Package name is required');
  const dependencies = await Helpers.getDependencies(packageName);

  if (!dependencies.length) {
    return;
  }

  if (promptUser) {
    const choice = await Helpers.promptUser(packageName, dependencies);

    if (choice !== 'Yes') {
      return;
    }
  }

  const view = new _view.default(packageName, dependencies);
  const errors = await Helpers.apmInstall(dependencies, function () {
    view.advance();
  });
  const promises = [];
  view.complete(errors);

  for (const dependency of dependencies) {
    if (errors.has(dependency.name)) {
      continue;
    }

    promises.push(atom.packages.activatePackage(dependency.name));
  }

  await Promise.all(promises);
}